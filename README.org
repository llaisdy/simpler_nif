* simpler_nif

** introduction

This is a toy repo demonstrating the use of Rust to create an Erlang NIF.  It's essentially an update of [[https://github.com/llaisdy/simple_nif][simple_nif]], which I wrote way back in 2011 when NIFs first came out.

All of the heavy lifting is done by [[https://github.com/rusterlium/rustler][Rustler]] and the [[https://github.com/brucify/rebar3_rustler][rustler rebar3 plugin]].

I also recommend the excellent tutorial [[https://medium.com/@brucifi/writing-your-first-erlang-nif-in-rust-274374094207][Writing Your First Erlang NIF in Rust]].

** method

As the tutorial above says, if you add the rebar3_rustler plugin to a global rebar.config file ...

#+begin_src 
%% ~/.config/rebar3/rebar.config

{plugins, [rebar3_rustler]}.
#+end_src

... then ~rebar3 new rustler_lib my_nif~ will create a new library with almost all the structure and content in this repo, including erlang and rust modules with example code, the ~.gitignore~, ~LICENSE~, even READMEs (the top-level ~README_from_rebar3.md~ is generated by rebar3 as ~README.md~).  All that's left to do is delete what you don't want and add your own functions.

~rebar3 compile~ will build the rust and copy the output .so file to priv/.  I think you have to ~cd native/my_nif~ and run ~cargo build~, ~cargo test~, etc. for the rust compiler feedback.

** results

This NIF just computes sum, mean, and quartiles for an input list of integers.  My rust is rudimentary  The main point of note is how simple is the data type conversion between erlang and rust.
